{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.2)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Greeting where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import WaiThriftSample_Types
import qualified Greeting_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Hello_args = Hello_args deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable Hello_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Hello_args where 
  arbitrary = QC.elements [Hello_args]
from_Hello_args :: Hello_args -> T.ThriftVal
from_Hello_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Hello_args :: (T.Protocol p, T.Transport t) => p t -> Hello_args -> P.IO ()
write_Hello_args oprot record = T.writeVal oprot $ from_Hello_args record
encode_Hello_args :: (T.Protocol p, T.Transport t) => p t -> Hello_args -> LBS.ByteString
encode_Hello_args oprot record = T.serializeVal oprot $ from_Hello_args record
to_Hello_args :: T.ThriftVal -> Hello_args
to_Hello_args (T.TStruct fields) = Hello_args{

  }
to_Hello_args _ = P.error "not a struct"
read_Hello_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Hello_args
read_Hello_args iprot = to_Hello_args <$> T.readVal iprot (T.T_STRUCT typemap_Hello_args)
decode_Hello_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Hello_args
decode_Hello_args iprot bs = to_Hello_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Hello_args) bs
typemap_Hello_args :: T.TypeMap
typemap_Hello_args = Map.fromList []
default_Hello_args :: Hello_args
default_Hello_args = Hello_args{
}
data Hello_result = Hello_result  { hello_result_success :: LT.Text
  } deriving (P.Show,P.Eq,TY.Typeable)
instance H.Hashable Hello_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` hello_result_success record  
instance QC.Arbitrary Hello_result where 
  arbitrary = M.liftM Hello_result (QC.arbitrary)
  shrink obj | obj == default_Hello_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Hello_result{hello_result_success = hello_result_success obj} then P.Nothing else P.Just $ default_Hello_result{hello_result_success = hello_result_success obj}
    ]
from_Hello_result :: Hello_result -> T.ThriftVal
from_Hello_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v7 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v7))) $ hello_result_success record
  ]
write_Hello_result :: (T.Protocol p, T.Transport t) => p t -> Hello_result -> P.IO ()
write_Hello_result oprot record = T.writeVal oprot $ from_Hello_result record
encode_Hello_result :: (T.Protocol p, T.Transport t) => p t -> Hello_result -> LBS.ByteString
encode_Hello_result oprot record = T.serializeVal oprot $ from_Hello_result record
to_Hello_result :: T.ThriftVal -> Hello_result
to_Hello_result (T.TStruct fields) = Hello_result{
  hello_result_success = P.maybe (hello_result_success default_Hello_result) (\(_,_val9) -> (case _val9 of {T.TString _val10 -> E.decodeUtf8 _val10; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Hello_result _ = P.error "not a struct"
read_Hello_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Hello_result
read_Hello_result iprot = to_Hello_result <$> T.readVal iprot (T.T_STRUCT typemap_Hello_result)
decode_Hello_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Hello_result
decode_Hello_result iprot bs = to_Hello_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Hello_result) bs
typemap_Hello_result :: T.TypeMap
typemap_Hello_result = Map.fromList [(0,("success",T.T_STRING))]
default_Hello_result :: Hello_result
default_Hello_result = Hello_result{
  hello_result_success = ""}
process_hello (seqid, iprot, oprot, handler) = do
  args <- read_Hello_args iprot
  (X.catch
    (do
      val <- Iface.hello handler
      let res = default_Hello_result{hello_result_success = val}
      T.writeMessageBegin oprot ("hello", T.M_REPLY, seqid)
      write_Hello_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("hello", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "hello" -> process_hello (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
